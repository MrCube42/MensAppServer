{
  "name": "jsuri",
  "description": "Uri and query string manipulation",
  "version": "1.3.0-beta.1",
  "author": {
    "name": "Derek Watson",
    "email": "watson@dcw.ca",
    "url": "http://dcw.ca"
  },
  "contributors": [
    {
      "name": "James M. Greene",
      "email": "james.m.greene@gmail.com",
      "url": "http://jamesgreene.net/"
    }
  ],
  "homepage": "https://github.com/derek-watson/jsUri",
  "repository": {
    "type": "git",
    "url": "git://github.com/derek-watson/jsUri.git"
  },
  "keywords": [
    "uri",
    "url",
    "query",
    "path"
  ],
  "main": "Uri",
  "scripts": {
    "test": "./node_modules/.bin/mocha",
    "lint": "./node_modules/.bin/jshint Uri.js",
    "minify": "./node_modules/.bin/uglifyjs Uri.js > Uri.min.js"
  },
  "dependencies": {},
  "devDependencies": {
    "jshint": "~2.1.11",
    "uglify-js": "~2.4.0",
    "mocha": "~1.14.0",
    "chai": "~1.8.1"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "[![Build Status](https://travis-ci.org/derek-watson/jsUri.png)](https://travis-ci.org/derek-watson/jsUri)\n\n# jsUri\n\nUri parsing and manipulation for node.js and the browser.\n\n    var uri = new Uri('http://user:pass@www.test.com:81/index.html?q=books#fragment')\n\nUse property methods to get at the various parts\n\n    uri.protocol()    // http\n    uri.userInfo()    // user:pass\n    uri.host()        // www.test.com\n    uri.port()        // 81\n    uri.path()        // /index.html\n    uri.query()       // q=books\n    uri.anchor()      // fragment\n\nProperty methods accept an optional value to set\n\n    uri.protocol('https')\n    uri.toString()    // https://user:pass@www.test.com:81/index.html?q=books#fragment\n\n    uri.host('mydomain.com')\n    uri.toString()    // https://user:pass@www.mydomain.com:81/index.html?q=books#fragment\n\nChainable setter methods help you compose strings\n\n    new Uri()\n        .setPath('/archives/1979/')\n        .setQuery('?page=1')                   // /archives/1979?page=1\n\n    new Uri()\n        .setPath('/index.html')\n        .setAnchor('content')\n        .setHost('www.test.com')\n        .setPort(8080)\n        .setUserInfo('username:password')\n        .setProtocol('https')\n        .setQuery('this=that&some=thing')      // https://username:password@www.test.com:8080/index.html?this=that&some=thing#content\n\n    new Uri('http://www.test.com')\n        .setHost('www.yahoo.com')\n        .setProtocol('https')                  // https://www.yahoo.com\n\n\n## Query param methods\n\nReturns the first query param value for the key\n\n    new Uri('?cat=1&cat=2&cat=3').getQueryParamValue('cat')             // 1\n\nReturns all query param values for the given key\n\n    new Uri('?cat=1&cat=2&cat=3').getQueryParamValues('cat')            // [1, 2, 3]\n\nInternally, query key/value pairs are stored as a series of two-value arrays in the Query object\n\n    new Uri('?a=b&c=d').query().params                  // [ ['a', 'b'], ['c', 'd']]\n\nAdd query param values\n\n    new Uri().addQueryParam('q', 'books')               // ?q=books\n\n    new Uri('http://www.github.com')\n        .addQueryParam('testing', '123')\n        .addQueryParam('one', 1)                        // http://www.github.com/?testing=123&one=1\n\n    // insert param at index 0\n    new Uri('?b=2&c=3&d=4').addQueryParam('a', '1', 0)  // ?a=1&b=2&c=3&d=4\n\nReplace every query string parameter named `key` with `newVal`\n\n    new Uri().replaceQueryParam('page', 2)     // ?page=2\n\n    new Uri('?a=1&b=2&c=3')\n        .replaceQueryParam('a', 'eh')          // ?a=eh&b=2&c=3\n\n    new Uri('?a=1&b=2&c=3&c=4&c=5&c=6')\n        .replaceQueryParam('c', 'five', '5')   // ?a=1&b=2&c=3&c=4&c=five&c=6\n\n\nRemoves instances of query parameters named `key`\n\n    new Uri('?a=1&b=2&c=3')\n        .deleteQueryParam('a')                 // ?b=2&c=3\n\n    new Uri('test.com?a=1&b=2&c=3&a=eh')\n        .deleteQueryParam('a', 'eh')           // test.com/?a=1&b=2&c=3\n\nCreate an identical uri object with no shared state\n\n    var baseUri = new Uri('http://localhost/')\n\n        baseUri.clone().setProtocol('https')   // https://localhost/\n        baseUri                                // http://localhost/\n\nThis project incorporates the [parseUri](http://blog.stevenlevithan.com/archives/parseuri) regular expression by Steven Levithan.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/derek-watson/jsUri/issues"
  },
  "_id": "jsuri@1.3.0-beta.1",
  "dist": {
    "shasum": "ca4b1e94dd4ec55daaa5c7a5eb82c9a127603b14",
    "tarball": "http://registry.npmjs.org/jsuri/-/jsuri-1.3.0-beta.1.tgz"
  },
  "_from": "jsuri@",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "dcw_ca",
    "email": "watson@dcw.ca"
  },
  "maintainers": [
    {
      "name": "dcw_ca",
      "email": "watson@dcw.ca"
    },
    {
      "name": "jamesmgreene",
      "email": "james.m.greene@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "ca4b1e94dd4ec55daaa5c7a5eb82c9a127603b14",
  "_resolved": "https://registry.npmjs.org/jsuri/-/jsuri-1.3.0-beta.1.tgz"
}
